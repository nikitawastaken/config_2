import unittest
from unittest.mock import patch, mock_open
from dependency_visualizer import parse_packages_file, build_dependency_graph, visualize_dependency_graph


class TestDependencyVisualizer(unittest.TestCase):
    @classmethod
    def setUpClass(cls):
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞ Packages
        cls.packages_file_content = """
Package: package-a
Depends: package-b, package-c

Package: package-b
Depends: package-d

Package: package-c
Depends:

Package: package-d
Depends: package-e

Package: package-e
Depends:
"""

    def setUp(self):
        # –û–∂–∏–¥–∞–µ–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
        self.expected_dependencies = {
            "package-a": ["package-b", "package-c"],
            "package-b": ["package-d"],
            "package-c": [],
            "package-d": ["package-e"],
            "package-e": []
        }

    @patch("gzip.open")
    def test_parse_packages_file_gz(self, mock_gzip_open):
        """
        –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∂–∞—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ Packages.gz.
        """
        mock_gzip_open.return_value.__enter__.return_value = self.packages_file_content.splitlines(keepends=True)
        dependencies = parse_packages_file("Packages.gz")
        self.assertEqual(dependencies, self.expected_dependencies)

    @patch("builtins.open", new_callable=mock_open, read_data="")
    def test_parse_packages_file_plain(self, mock_open_file):
        """
        –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–±—ã—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ Packages.
        """
        mock_open_file.return_value.__enter__.return_value = self.packages_file_content.splitlines(keepends=True)
        dependencies = parse_packages_file("Packages")
        self.assertEqual(dependencies, self.expected_dependencies)

    def test_build_dependency_graph(self):
        """
        –¢–µ—Å—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
        """
        graph = build_dependency_graph("package-a", self.expected_dependencies)
        expected_graph = {
            "package-a": ["package-b", "package-c"],
            "package-b": ["package-d"],
            "package-c": [],
            "package-d": ["package-e"],
            "package-e": []
        }
        self.assertEqual(graph, expected_graph)

    @patch("dependency_visualizer.Digraph")
    def test_visualize_dependency_graph(self, mock_digraph):
        """
        –¢–µ—Å—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
        """
        graph = {
            "package-a": ["package-b", "package-c"],
            "package-b": ["package-d"],
            "package-c": [],
            "package-d": ["package-e"],
            "package-e": []
        }
        mock_dot = mock_digraph.return_value

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        visualize_dependency_graph(graph, "test_output", "dot")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–∑–ª—ã –∏ —Å–≤—è–∑–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã
        mock_dot.node.assert_any_call("package-a")
        mock_dot.edge.assert_any_call("package-a", "package-b")
        mock_dot.edge.assert_any_call("package-a", "package-c")
        mock_dot.edge.assert_any_call("package-b", "package-d")
        mock_dot.edge.assert_any_call("package-d", "package-e")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –±—ã–ª –≤—ã–∑–≤–∞–Ω
        mock_dot.render.assert_called_with("test_output", cleanup=True)

    def tearDown(self):
        """
        –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤.
        """
        import os
        if os.path.exists("test_output.png"):
            os.remove("test_output.png")


if __name__ == "__main__":
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä
    suite = unittest.TestLoader().loadTestsFromTestCase(TestDependencyVisualizer)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã —Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
    result = unittest.TextTestRunner(verbosity=2).run(suite)
    
    # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –∏–ª–∏ –æ—à–∏–±–∫–∞—Ö
    if result.wasSuccessful():
        print("\n–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ! üéâ")
    else:
        print(f"\n–¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —Å –æ—à–∏–±–∫–∞–º–∏. –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {len(result.failures)} —Ç–µ—Å—Ç(–æ–≤).")